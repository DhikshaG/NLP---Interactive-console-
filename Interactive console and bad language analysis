# Install the necessary libraries
!pip install spacy nltk

# Download the spaCy model
!python -m spacy download en_core_web_sm

# Import the libraries
import spacy
from nltk.sentiment import SentimentIntensityAnalyzer

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Initialize NLTK sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Sample data
texts = [
    "The sales for last quarter were exceptional, showing a 20% increase!",
    "We received numerous complaints about the recent update.",
    "I need to create a purchase order for 500 units of item X.",
    "What is the total revenue for the past fiscal year?"
]

def process_text(text):
    doc = nlp(text)
    
    # Named Entity Recognition (NER)
    entities = [(ent.text, ent.label_) for ent in doc.ents]
    
    # Sentiment Analysis
    sentiment = sia.polarity_scores(text)
    
    return entities, sentiment

def main():
    for text in texts:
        print(f"Processing text: {text}")
        
        # Extract entities and sentiment
        entities, sentiment = process_text(text)
        
        # Print results
        print("Entities:", entities)
        print("Sentiment:", sentiment)
        print("-" * 40)

# Run the main function
main()


#interactive console 
# Install necessary libraries
!pip install spacy nltk ipywidgets
!python -m spacy download en_core_web_sm

# Import libraries
import spacy
from nltk.sentiment import SentimentIntensityAnalyzer
import nltk
import ipywidgets as widgets
from IPython.display import display

# Download the NLTK VADER lexicon
nltk.download('vader_lexicon')

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Initialize NLTK sentiment analyzer
sia = SentimentIntensityAnalyzer()

def process_text(text):
    doc = nlp(text)
    
    # Named Entity Recognition (NER)
    entities = [(ent.text, ent.label_) for ent in doc.ents]
    
    # Sentiment Analysis
    sentiment = sia.polarity_scores(text)
    
    return entities, sentiment

def analyze_text(text):
    # Extract entities and sentiment
    entities, sentiment = process_text(text)
    
    # Print results
    print("Entities:", entities)
    print("Sentiment:", sentiment)
    print("-" * 40)

# Create a text input widget
text_input = widgets.Textarea(
    value='',
    placeholder='Type your text here...',
    description='Input:',
    layout=widgets.Layout(width='100%', height='150px')
)

# Create a button widget
analyze_button = widgets.Button(description="Analyze Text")

# Define button click handler
def on_button_click(b):
    text = text_input.value
    print("Processing text:")
    analyze_text(text)

# Attach the button click handler
analyze_button.on_click(on_button_click)

# Display widgets
display(text_input, analyze_button)


#bad language filter saying
# Install necessary libraries
!pip install spacy nltk
!python -m spacy download en_core_web_sm

# Import necessary libraries
import spacy
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import re

# Download NLTK stopwords
nltk.download('stopwords')
nltk.download('punkt')

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Define bad words list
bad_words = {'badword1', 'badword2', 'inappropriate'}

def contains_bad_language(text):
    tokens = word_tokenize(text.lower())
    for word in tokens:
        if word in bad_words:
            return True
    return False

def process_query(text):
    if contains_bad_language(text):
        return "Your message contains inappropriate language and cannot be processed."

    doc = nlp(text)
    
    # Simple rule-based classification
    if 'it policy' in text.lower():
        return "IT Policies: IT policies cover all aspects of technology use within the company, including security, usage guidelines, and acceptable use of company resources."
    
    if 'hr policy' in text.lower():
        return "HR Policies: HR policies include guidelines on employment, employee rights, workplace behavior, and benefits."
    
    if 'event notification' in text.lower():
        return "Event Notifications: Event notifications provide details about upcoming events, including dates, times, and locations."
    
    if 'leave application' in text.lower():
        return "Leave Application: To apply for leave, please submit your request through the companyâ€™s HR system or contact your HR representative directly."
    
    return "Sorry, I could not understand your query. Please try again."

def main():
    # Example queries
    queries = [
        "Can you provide details about the IT policy?",
        "What are the HR policies regarding remote work?",
        "When is the next company event?",
        "How can I apply for leave?",
        "This is a message with badword1."
    ]
    
    for query in queries:
        print(f"Query: {query}")
        response = process_query(query)
        print(f"Response: {response}")
        print("-" * 40)

# Run the main function to test
main()



